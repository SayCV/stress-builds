---
name: "S2 - Build target"

on:
  workflow_call:
    inputs:
      job:
        description: Stringified JSON of job
        required: true
        type: string
      config:
        description: Stringified JSON of config
        required: true
        type: string

jobs:
  Build:
    runs-on: ${{ matrix.job.os }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        job: ${{ fromJSON(inputs.job) }}
        config: ${{ fromJSON(inputs.config) }}
    env:
      primaryRepoHost: ${{ matrix.config.primary_repo.repo_host }}
      primaryRepoUser: ${{ matrix.config.primary_repo.repo_user }}
      primaryRepoName: ${{ matrix.config.primary_repo.repo_name }}
      primaryName:     ${{ matrix.config.primary_repo.name }}
      primaryBranch:   ${{ matrix.config.primary_repo.branch }}
      primaryCommit:   ${{ matrix.config.primary_repo.commit }}
      primarySparse:   ${{ matrix.config.primary_repo.sparse }}
      primaryRepo:     ${{ matrix.config.primary_repo.repo_host }}/${{ matrix.config.primary_repo.repo_user }}/${{ matrix.config.primary_repo.repo_name }}
      primaryApiRepo:  ${{ matrix.config.primary_repo.repo_host }}/api/v1/repos/${{ matrix.config.primary_repo.repo_user }}/${{ matrix.config.primary_repo.repo_name }}
      primaryDir:      ${{ matrix.config.primary_repo.name }}_${{ matrix.config.primary_repo.commit }}
      primaryPAT:      ${{ secrets.GITEA_PAT }}
      auxiliaryRepoHost: ${{ matrix.config.auxiliary_repo.repo_host }}
      auxiliaryRepoUser: ${{ matrix.config.auxiliary_repo.repo_user }}
      auxiliaryRepoName: ${{ matrix.config.auxiliary_repo.repo_name }}
      auxiliaryName:     ${{ matrix.config.auxiliary_repo.name }}
      auxiliaryBranch:   ${{ matrix.config.auxiliary_repo.branch }}
      auxiliaryCommit:   ${{ matrix.config.auxiliary_repo.commit }}
      auxiliarySparse:   ${{ matrix.config.auxiliary_repo.sparse }}
      auxiliaryRepo:     ${{ matrix.config.auxiliary_repo.repo_host }}/${{ matrix.config.auxiliary_repo.repo_user }}/${{ matrix.config.auxiliary_repo.repo_name }}
      auxiliaryApiRepo:  ${{ matrix.config.auxiliary_repo.repo_host }}/api/v1/repos/${{ matrix.config.auxiliary_repo.repo_user }}/${{ matrix.config.auxiliary_repo.repo_name }}
      auxiliaryDir:      ${{ matrix.config.auxiliary_repo.name }}_${{ matrix.config.auxiliary_repo.commit }}
      auxiliaryPAT:      ${{ secrets.GITEA_PAT }}
      inter_ver_file:            ${{ matrix.config.inter_ver_file }}
    steps:
    - name: S100 - Download workflow artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: S110 - Install msys2 environments
      if: ${{ always() }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.job.msys2_sys }}
        update: true
        install: >-
          base-devel msys2-runtime-devel autotools intltool libtool gcc bison flex gperf help2man meson ninja texinfo patch unzip
          autoconf-archive gettext-devel ncurses-devel rsync
        path-type: inherit
    - name: S120 - Parse workflow versions
      id: versions
      shell: msys2 {0}
      run: |
        outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
        source ${{ env.inter_ver_file }}
        outputs primaryVer auxiliaryVer target_arch target_vendor target_os target_abi
        echo "primaryCommit=$primaryCommit" >> $GITHUB_ENV
        echo "primaryDir=${primaryName}_${primaryCommit}" >> $GITHUB_ENV
        echo "auxiliaryCommit=$auxiliaryCommit" >> $GITHUB_ENV
        echo "auxiliaryDir=${auxiliaryName}_${auxiliaryCommit}" >> $GITHUB_ENV
        ls

    - name: S200 - Check workflow environments
      id: check
      shell: msys2 {0}
      run: |
        ## VARs setup
        outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
        if [ "${{ env.primarySparse }}" == '' ]; then
          primary_sparse_set=false;
        else
          primary_sparse_set=true;
        fi
        if [ "${{ env.primaryCommit }}" == '' ]; then
          primary_commit_set=false;
        else
          primary_commit_set=true;
        fi
        if [ "${{ env.auxiliarySparse }}" == '' ]; then
          auxiliary_sparse_set=false;
        else
          auxiliary_sparse_set=true;
        fi
        if [ "${{ env.auxiliaryCommit }}" == '' ]; then
          auxiliary_commit_set=false;
        else
          auxiliary_commit_set=true;
        fi
        outputs primary_sparse_set primary_commit_set auxiliary_sparse_set auxiliary_commit_set
    - name: S210 - Update workflow environments
      if: ${{ steps.check.outputs.primary_commit_set != 'true' }}
      shell: msys2 {0}
      run: |
        set -v
        escapedSparseDir="$(echo $primarySparse | sed 's;/;%2F;g')"
        if [ "${{ steps.check.outputs.primary_sparse_set }}" == 'true' ]; then
          commit=$(curl -X GET -H "Content-Type:application/json" "https://$primaryPAT@$primaryApiRepo/commits?sha=$primaryBranch&path=$escapedSparseDir" | jq -r '.[0].sha')
        else
          commit="$(git ls-remote https://$primaryPAT@$primaryRepo --tags $primaryBranch | awk '{print $1;}')";
        fi
        echo "primaryCommit=$commit" >> $GITHUB_ENV
        echo "primaryDir=${primaryName}_${commit}" >> $GITHUB_ENV
    - name: S211 - Update workflow environments
      if: ${{ env.auxiliaryName != '' && steps.check.outputs.auxiliary_commit_set != 'true' }}
      shell: msys2 {0}
      run: |
        set -v
        escapedSparseDir="$(echo $auxiliarySparse | sed 's;/;%2F;g')"
        if [ "${{ steps.check.outputs.auxiliary_sparse_set }}" == 'true' ]; then
          commit=$(curl -X GET -H "Content-Type:application/json" "https://$auxiliaryPAT@$auxiliaryApiRepo/commits?sha=$auxiliaryBranch&path=$escapedSparseDir" | jq -r '.[0].sha')
        else
          commit="$(git ls-remote https://$auxiliaryPAT@$auxiliaryRepo --tags $auxiliaryBranch | awk '{print $1;}')";
        fi
        echo "auxiliaryCommit=$commit" >> $GITHUB_ENV
        echo "auxiliaryDir=${auxiliaryName}_${commit}" >> $GITHUB_ENV
    - name: S220 - Initialize workflow variables
      id: vars
      shell: msys2 {0}
      run: |
        ## VARs setup
        outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
        ## DIRs setup
        if [ "${{ runner.os }}" == 'Windows' ]; then
          gh_workspace_nix="$(cygpath -u '${{ github.workspace }}')"
          gh_workspace_mix="$(cygpath -m '${{ github.workspace }}')"
        else
          gh_workspace_nix="${{ github.workspace }}"
          gh_workspace_mix="${{ github.workspace }}"
        fi
        echo "gh_workspace_nix=${gh_workspace_nix}" >> $GITHUB_ENV
        echo "gh_workspace_mix=${gh_workspace_mix}" >> $GITHUB_ENV

        source_dir=$gh_workspace_mix/$primaryDir/$primaryName/$primarySparse
        build_dir=$gh_workspace_mix/$primaryDir/build
        build_dir=$source_dir
        install_dir=$gh_workspace_mix/install

        outputs source_dir build_dir install_dir
        echo "source_dir=${source_dir}" >> $GITHUB_ENV
        echo "build_dir=${build_dir}" >> $GITHUB_ENV
        echo "install_dir=${install_dir}" >> $GITHUB_ENV

        if [ "${{ env.auxiliaryName }}" != '' ]; then
          aux_source_dir=$gh_workspace_mix/$auxiliaryDir/$auxiliaryName
          aux_build_dir=$gh_workspace_mix/$auxiliaryDir/build
          aux_build_dir=$aux_source_dir
          aux_install_dir=$gh_workspace_mix/install

          outputs aux_source_dir aux_build_dir aux_install_dir
          echo "aux_source_dir=${aux_source_dir}" >> $GITHUB_ENV
          echo "aux_build_dir=${aux_build_dir}" >> $GITHUB_ENV
          echo "aux_install_dir=${aux_install_dir}" >> $GITHUB_ENV
        fi

        # toolchain
        CC='${{ matrix.job.target }}-gcc'
        CXX='${{ matrix.job.target }}-g++'
        outputs CC CXX
        echo "CC=${CC}" >> $GITHUB_ENV
        echo "CXX=${CXX}" >> $GITHUB_ENV
    - name: S230 - Create workflow directories
      shell: msys2 {0}
      run: |
        ## Create build/work space
        [ -z $primaryDir ] || mkdir -p $primaryDir
        [ -z $auxiliaryDir ] || mkdir -p $auxiliaryDir
        pwd && ls
    - name: S240 - Install workflow prerequisites
      shell: msys2 {0}
      run: |
        ## Install/setup prerequisites

    - name: S250 - Find cross toolchain
      uses: oprypin/find-latest-tag@v1
      with:
        repository: '${{ github.repository_owner }}/crosstool-ng-msys2-builds'
        releases-only: true
      id: toolchain-find-latest-tag
    - name: S251 - Download cross toolchain
      uses: robinraju/release-downloader@v1
      with:
        repository: '${{ github.repository_owner }}/crosstool-ng-msys2-builds'
        latest: true
        # tag: ''
        fileName: '${{ matrix.job.target }}-msys2.windows-2022.tar.gz'
        tarBall: false
        zipBall: false
        #token: ${{ secrets.GITHUB_TOKEN }}
    - name: S252 - Extract cross toolchain
      shell: msys2 {0}
      run: |
        mkdir -p .local
        if [ "${{ matrix.job.target }}" == 'x86_64-unknown-linux-musl' ]; then
          echo "## Extract x86_64-unknown-linux-gnu-msys2.windows-2022.tar.gz"
          tar -xf x86_64-unknown-linux-gnu-msys2.windows-2022.tar.gz -C .local
        else
          tar -xf ${{ matrix.job.target }}-msys2.windows-2022.tar.gz -C .local
        fi
      env:
        MSYS_NO_PATHCONV:
        MSYS: winsymlinks:native
    - name: S260 - Update environment variables
      shell: msys2 {0}
      run: |
        echo "$GITHUB_WORKSPACE/.local/bin" >> "$GITHUB_PATH"
    - name: S261 - Inspect environment variables
      shell: msys2 {0}
      run: env

    - name: S330 - Extract primary source tarball
      shell: msys2 {0}
      continue-on-error: false
      run: |
        tar -xvf ${{ env.primaryName }}-source.tar
    - name: S331 - Extract auxiliary source tarball
      shell: msys2 {0}
      continue-on-error: false
      run: |
        tar -xvf ${{ env.auxiliaryName }}-source.tar

    - name: S400 - Show workflow information
      shell: msys2 {0}
      run: |
        ## Info
        # commit info
        echo "## commit"
        # environment
        echo "## environment"
        echo "CI='${CI}'"
        # tooling info display
        echo "## tooling"
        which gcc >/dev/null 2>&1 && (gcc --version | head -1) || true
        which $CC >/dev/null 2>&1 && ($CC --version | head -1) || true
        which $CXX >/dev/null 2>&1 && ($CXX --version | head -1) || true

    - name: S500 - Build primary targets
      if: ${{ env.primaryName != '' }}
      shell: msys2 {0}
      run: |
        config_dir=`realpath --relative-to=$build_dir $source_dir`
        echo "## source_dir=$source_dir"
        echo "## build_dir=$build_dir"
        echo "## install_dir=$install_dir"
        echo "## config_dir=$config_dir"
        mkdir -p $build_dir
        mkdir -p $install_dir

        cd $source_dir
        echo "## Bootstraping ..."
        # ./bootstrap.sh
        cd $build_dir

        echo "## Configuring ..."
        cflags="-O2"
        if [ "${{ matrix.job.cxxflags }}" != '' ]; then
          cflags+=" ${{ matrix.job.cxxflags }}"
        fi
        cflags+=" -lgcc_s"
        # enable extra warnings
        cflags+=" -Winline"
        CFLAGS="${cflags}" CXXFLAGS="${cflags}" $config_dir/configure \
          --host=${{ matrix.job.target }} \
          --prefix=$install_dir/stress-${{ steps.versions.outputs.target_arch }} \
          --enable-static \
          --disable-shared

        echo "## Building ..."
        make -j4 man_MANS=
        echo "## Installing ..."
        make install man_MANS= DESTDIR=
      env:
       MSYS_NO_PATHCONV:
       MSYS: winsymlinks:native
    - name: S510 - Build auxiliary targets
      if: ${{ env.auxiliaryName != '' }}
      shell: msys2 {0}
      run: |
        aux_config_dir=`realpath --relative-to=$aux_build_dir $aux_source_dir`
        echo "## aux_source_dir=$aux_source_dir"
        echo "## aux_build_dir=$aux_build_dir"
        echo "## aux_install_dir=$aux_install_dir"
        echo "## aux_config_dir=$aux_config_dir"
        mkdir -p $aux_build_dir
        mkdir -p $aux_install_dir

        cd $aux_source_dir
        echo "## Bootstraping ..."
        # ./bootstrap.sh
        cd $aux_source_dir

        echo "## Configuring ..."
        cflags="-O2"
        cflags+=" -lgcc_s"
        # enable extra warnings
        cflags+=" -Winline"
        #CFLAGS="${cflags}" CXXFLAGS="${cflags}" $aux_config_dir/configure \
        #  --host=${{ matrix.job.target }} \
        #  --prefix=$install_dir/stress-${{ steps.versions.outputs.target_arch }} \
        #  --enable-static \
        #  --disable-shared

        echo "## Building ..."
        CFLAGS="${cflags}" CXXFLAGS="${cflags}" CC="${CC}" make -j4 man_MANS=
        echo "## Installing ..."
        make install man_MANS= DESTDIR=$install_dir/stress-${{ steps.versions.outputs.target_arch }}
      env:
       MSYS_NO_PATHCONV:
       MSYS: winsymlinks:native

    - name: S600 - Test workflow targets
      if: matrix.job.skip-tests != true
      shell: msys2 {0}
      run: |
        ## Test

    - name: S700 - Archive build artifacts
      shell: msys2 {0}
      run: |
        ## Archive artifacts
        tar -C $install_dir \
            -czf $gh_workspace_nix/stress-${{ steps.versions.outputs.target_arch }}.tar.gz \
            stress-${{ steps.versions.outputs.target_arch }} \
            || true
    - name: S710 - Archive log artifacts
      shell: msys2 {0}
      run: |
        ## Archive artifacts
        tar \
            -czf $gh_workspace_nix/stress-${{ steps.versions.outputs.target_arch }}-buildlog.tar.gz \
            $build_dir/*.log $aux_build_dir/*.log \
            || true
      if: ${{ always() }}
    - name: S800 - Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stress-${{ steps.versions.outputs.target_arch }}.tar.gz
        path: |
          stress-${{ steps.versions.outputs.target_arch }}.tar.gz
    - name: S810 - Upload log artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stress-${{ steps.versions.outputs.target_arch }}-buildlog.tar.gz
        path: |
          stress-${{ steps.versions.outputs.target_arch }}-buildlog.tar.gz
      if: ${{ always() }}
